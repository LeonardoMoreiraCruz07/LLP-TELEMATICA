#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Stack {
    struct Node* top;
};

struct Node* create_node(int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = data;
    new_node->next = NULL;
    return new_node;
}

struct Stack* create_stack() {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->top = NULL;
    return stack;
}

int is_empty(struct Stack* stack) {
    return stack->top == NULL;
}

void push(struct Stack* stack, int data) {
    struct Node* new_node = create_node(data);
    new_node->next = stack->top;
    stack->top = new_node;
}

int pop(struct Stack* stack) {
    if (is_empty(stack)) {
        printf("A pilha está vazia. Não é possível executar o pop.\n");
        return -1; 
    } else {
        int popped_data = stack->top->data;
        struct Node* temp = stack->top;
        stack->top = stack->top->next;
        free(temp);
        return popped_data;
    }
}

int top_element(struct Stack* stack) {
    if (is_empty(stack)) {
        printf("A pilha está vazia. Não há topo para verificar.\n");
        return -1; 
    } else {
        return stack->top->data;
    }
}

void print_stack(struct Stack* stack) {
    struct Node* current = stack->top;
    while (current) {
        printf("%d\n", current->data);
        current = current->next;
    }
}

int main() {
    struct Stack* pilha = create_stack();

    printf("Topo da pilha: %d\n", top_element(pilha));

    push(pilha, 1);
    push(pilha, 2);
    push(pilha, 3);

    printf("Pilha após push:\n");
    print_stack(pilha);

    
    printf("Topo da pilha: %d\n", top_element(pilha));

    
    int popped = pop(pilha);
    printf("Elemento retirado (pop): %d\n", popped);

    
    printf("Pilha após pop:\n");
    print_stack(pilha);

    
    printf("Topo da pilha: %d\n", top_element(pilha));

    return 0;
}
